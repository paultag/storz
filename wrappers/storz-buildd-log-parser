#!/usr/bin/env python
# Copyright (c) Paul R. Tagliamonte <paultag@debian.org>, 2013 under the
# terms and conditions of storz it's self.

from firehose.report import DebianBinary, Stats
import firehose.parsers.gcc as fgcc
from storz.store import store

from datetime import timedelta
from bz2 import BZ2File
import sys
import os
import re


path = sys.argv[1]

if path.startswith("./"):
    path = path[2:]

file_flag = "%s.firehose" % (path)

if os.path.exists(file_flag):
    print "Skipping"
    sys.exit(1)

name, version, basename = path.split("/")
arch, _ = basename.split("_", 1)
local = None
if "-" in version:
    version, local = version.rsplit("-", 1)

sut = DebianBinary(name, version, local, arch)

fd = BZ2File(path, 'r')
#fd = open(path, 'r')


STATS = re.compile("Build needed (?P<time>.*), (?P<space>.*) dis(c|k) space")
gccversion = None
stats = None

for line in fd.readlines():
    flag = "Toolchain package versions: "

    stat = STATS.match(line)
    if stat:
        info = stat.groupdict()
        hours, minutes, seconds = [int(x) for x in info['time'].split(":")]
        timed = timedelta(hours=hours, minutes=minutes, seconds=seconds)
        stats = Stats(timed.total_seconds())

    if line.startswith(flag):
        line = line[len(flag):].strip()
        packages = line.split(" ")
        versions = {}
        for package in packages:
            if "_" not in package:
                continue

            b, bv = package.split("_", 1)
            versions[b] = bv

        vs = filter(lambda x: x.startswith("gcc"), versions)

        if vs == []:
            continue

        vs = vs[0]
        gccversion = versions[vs]

fd.seek(0)

obj = fgcc.parse_file(
    fd,
    sut=sut,
    gccversion=gccversion,
    stats=stats
)

store(obj)
open(file_flag, 'w').close()

print "Writted"
