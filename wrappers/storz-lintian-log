#!/usr/bin/env python
# Copyright (c) Paul R. Tagliamonte <paultag@debian.org>, 2013 under the
# terms and conditions of storz it's self.

from firehose.report import (Metadata, Generator, Analysis,
                             DebianSource, DebianBinary, Issue,
                             Message, Location, File)


import sys
import re


path = sys.argv[1]
fd = open(path, 'r')


mapping = {
    "I": "info",
    "W": "warning",
    "P": "pedantic-nitpick",
    "E": "error",
    "X": "experimental",
    "N": "note"
}

PACKAGE = re.compile(r"Processing (?P<type>(source|binary).*) package "
                      "(?P<package>.*) \(version (?P<version>.*), arch "
                      "(?P<arch>.*)\) ...")

# activiz.net-doc binary (1:1.0~git20111123-6) [all]: duplicate-files
LINTLINE = re.compile(r"(?P<package>.*) (?P<type>(binary|source)) "
                        "\((?P<version>.*)\) \[(?P<arch>.*)\]: "
                        "(?P<tag>[\w-]*) (?P<msg>.*)")

curpackage = None
sut = None
ana = None


def _gen_ana(sut):
    return Analysis(
        metadata=Metadata(
            generator=Generator(name='lintian', version='unknown'),
            sut=sut,
            file_=None,
            stats=None),
        results=[])


def _dump_ana():
    if ana is None:
        return
    sut = ana.metadata.sut
    fpath = "%s_%s" % (sut.name, sut.version)

    if sut.release:
        fpath += "-%s" % (sut.release)

    if hasattr(sut, 'arch'):
        fpath += ".%s" % (sut.arch)

    print fpath
    open(fpath, 'w').write(ana.to_xml_str())


for line in fd.readlines():
    if line.strip() == "":
        continue

    if not ":" in line:
        continue

    tag, line = [x.strip() for x in line.split(":", 1)]
    if tag == 'N':
        if line == '----':
            _dump_ana()

            curpackage = None
            ana = None
            sut = None
            continue
        match = PACKAGE.match(line)
        if match is None:
            continue
        obj = match.groupdict()
        name = obj['package']
        version = obj['version']
        release = None
        if "-" in version:
            version, release = version.rsplit("-", 1)
        if obj['arch'] == "source":
            sut = DebianSource(name, version, release)
        else:
            sut = DebianBinary(name, version, release, obj['arch'])

        ana = _gen_ana(sut)
        continue

    try:
        severity = mapping[tag]
    except KeyError:
        continue

    match = LINTLINE.match(line)
    if match:
        obj = match.groupdict()

        issue = Issue(cwe=None,
                      testid=obj['tag'],
                      location=Location(
                          file=File(obj['package'], None),
                          function=None,
                          point=None),
                      severity=severity,
                      message=Message(text=obj['msg']),
                      notes=None,
                      trace=None)
        ana.results.append(issue)
