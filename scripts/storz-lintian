#!/usr/bin/env python
# Copyright (c) Paul Tagliamonte <paultag@debian.org>, 2013, under the terms
# and conditions of the GPL-2+


from storz.utils import run_command
from storz.wrapper import generate_analysis

from firehose.model import Issue, Message, File, Location

import sys
import os


mapping = {
    "I": "info",
    "W": "warning",
    "P": "pedantic",
    "E": "error",
    "X": "experimental",
    "N": "note"
}


def do_lint(fpath, tool="lintian"):
    stdout, stderr, exit = run_command([
        tool,
        "--version"
    ])

    lines = [x.decode('utf-8') for x in stdout.splitlines()]
    if lines == []:
        raise Exception("Unknown version of Lintian.")
    version = lines[0].split(" ", 1)[1][1:]

    analysis = generate_analysis(tool, version, fpath)

    stdout, stderr, exit = run_command([
        tool,
        "-IE",
        "--pedantic",
        fpath
    ])

    for line in stdout.splitlines():
        line = line.decode('utf-8')
        sev, package, fullmsg = line.split(": ", 2)

        try:
            testid, msg = fullmsg.split(" ", 1)
        except ValueError:
            testid, msg = fullmsg, fullmsg

        severity = mapping[sev]
        if "source" in package:
            package, _ = package.rsplit(" ", 1)
            # package = "src:%s" % (package)

        pth = os.path.basename(fpath)
        analysis.results.append(Issue(cwe=None,
                                      testid=testid,
                                      location=Location(file=File(pth, None),
                                                        function=None,
                                                        point=None),
                                      severity=severity,
                                      message=Message(text=fullmsg),
                                      notes=None,
                                      trace=None))
    return analysis


sys.argv.pop(0)  # exe name
fpath = sys.argv.pop(0)
tool = "lintian"
if sys.argv != []:
    tool = sys.argv.pop(0)

obj = do_lint(fpath, tool=tool)
print(obj.to_xml_bytes())
